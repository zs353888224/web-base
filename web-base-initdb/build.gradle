description = '较为独立的数据持久层'
configurations {
    mybatisGenerator
}

dependencies {
    compile project(':web-base-env')
    compile("org.terasoluna.gfw:terasoluna-gfw-mybatis3:5.0.0.RELEASE")
    compile("org.terasoluna.gfw:terasoluna-gfw-jodatime:${terasolunaVersion}")

    /** connection pool */
//    compile("com.zaxxer:HikariCP-java6:2.3.12")
//    compile group: 'com.oracle', name: 'ojdbc6', version: '11.2.0'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.25'

    /** 一个处理sql的工具 */
//    compile group: 'com.github.jsqlparser', name: 'jsqlparser', version: '0.9.1'
//    compile group: 'org.mybatis', name: 'mybatis', version: '3.2.8'
//    compile group: 'org.mybatis', name: 'mybatis-spring', version: '1.2.2'

    testCompile group: 'junit', name: 'junit', version: '4.7'
    testCompile(group: 'org.springframework', name: 'spring-test', version: '3.2.10.RELEASE') {
        exclude(module: 'commons-logging')
    }
//    testCompile group: 'org.dbunit', name: 'dbunit', version: '2.5.2'
//    testCompile group: 'com.github.springtestdbunit', name: 'spring-test-dbunit', version: '1.1.0'

    //使用Mybatis-Generator自动生成Dao、Model、Mapping相关文件
    //给mybatisGenerator插件用的jar包
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.38'
    mybatisGenerator 'tk.mybatis:mapper:3.3.2'
}

def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/db-generate.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties;
}

task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.user")
    ant.properties['password'] = properties.getProperty("jdbc.pass")
    ant.properties['modelPackage'] = properties.getProperty("modelPackage")
    ant.properties['mapperPackage'] = properties.getProperty("mapperPackage")
    ant.properties['sqlMapperPackage'] = properties.getProperty("sqlMapperPackage")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path

    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')

            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}
